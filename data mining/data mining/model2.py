# -*- coding: utf-8 -*-
"""2model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dQTZ8MyEDKhDbyo3NCipotcOWUgHD9jO

# **Sofifa adatok beállítása**

---
"""

import numpy as np
import os
import tensorflow as tf
assert tf.__version__.startswith('2')
from google.colab import drive
import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
print("Setup Complete")

#physical_devices = tf.config.experimental.list_physical_devices('GPU')
#print("Num GPUs Available: ", len(physical_devices))
#tf.config.experimental.set_memory_growth(physical_devices[0], True)

drive.mount('/content/drive')

fifa13df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa13.csv')
fifa14df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa14.csv')
fifa15df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa15.csv')
fifa16df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa16.csv')
fifa17df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa17.csv')
fifa18df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa18.csv')
fifa19df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa19.csv')
fifa20df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa20.csv')
fifa21df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa21.csv')
fifa22df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data/sofifa/sofifa22.csv')

"""# **Fifa 22 adatelőkészítés**

---

klub adatok az adatbázis feltöltéshez

eltávolítottam a felesleges sorokat
"""

fifa22df = fifa22df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa22df.loc[fifa22df.OffenceWidth == 'Chance CreationPossession', 'OffenceWidth'] = 'Width5'

"""a hasznos sorokból kiszedtem a felesleges szövegeket(vagy általakítottam értelmezhető alakká, ha tartalmazott információt) és átalakítottam float vagy int típussá"""

fifa22df['MidfieldRating'] = fifa22df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa22df['DefenceRating'] = fifa22df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa22df['ClubWorth'] = fifa22df['ClubWorth'].map(lambda x: x.lstrip('Club Worth€'))
fifa22df['XIAverageAge'] = fifa22df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa22df['DefenceWidth'] = fifa22df['DefenceWidth'].map(lambda x: x.lstrip('Team Width')).astype(float)
fifa22df['DefenceDepth'] = fifa22df['DefenceDepth'].map(lambda x: x.lstrip('Depth')).astype(float)
fifa22df['OffenceWidth'] = fifa22df['OffenceWidth'].map(lambda x: x.lstrip('Width')).astype(float)

for idx in fifa22df.index: 
  if fifa22df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa22df.loc[idx, 'ClubWorth'] = float(fifa22df.loc[idx, 'ClubWorth'].rstrip('M'))
  elif fifa22df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa22df.loc[idx, 'ClubWorth'] = float(fifa22df.loc[idx, 'ClubWorth'].rstrip('B'))*1000

fifa22df['overall'] = fifa22df['overall'].astype(float)
fifa22df['AttackingRating'] = fifa22df['AttackingRating'].astype(float)
fifa22df['ClubWorth'] = fifa22df['ClubWorth'].astype(float)
fifa22df['Likes'] = fifa22df['Likes'].astype(float)
fifa22df['Dislikes'] = fifa22df['Dislikes'].astype(float)

fifa22df.head(20)

fifa22df.info()

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

fifa_22_names = pd.DataFrame(fifa22df.name.unique(),columns = ['names'])
fifa_22_names

"""# **Fifa 21 adatelőkészítés**

---

eltávolítottam a felesleges sorokat
"""

fifa21df = fifa21df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa21df.loc[fifa21df.OffenceWidth == 'Chance CreationPossession', 'OffenceWidth'] = 'Width5'

"""a hasznos sorokból kiszedtem a felesleges szövegeket(vagy általakítottam értelmezhető alakká, ha tartalmazott információt) és átalakítottam float vagy int típussá"""

fifa21df['MidfieldRating'] = fifa21df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa21df['DefenceRating'] = fifa21df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.lstrip('Club Worth€'))
fifa21df['XIAverageAge'] = fifa21df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa21df['DefenceWidth'] = fifa21df['DefenceWidth'].map(lambda x: x.lstrip('Team Width')).astype(float)*10
fifa21df['DefenceDepth'] = fifa21df['DefenceDepth'].map(lambda x: x.lstrip('Depth')).astype(float)*10
fifa21df['OffenceWidth'] = fifa21df['OffenceWidth'].map(lambda x: x.lstrip('Width')).astype(float)*10
fifa21df.loc[7,'DefenceDepth'] = fifa21df.loc[7,'DefenceDepth']/10
fifa21df.loc[7,'DefenceWidth'] = fifa21df.loc[7,'DefenceWidth']/10

for idx in fifa21df.index: 
  if fifa21df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa21df.loc[idx, 'ClubWorth'] = float(fifa21df.loc[idx, 'ClubWorth'].rstrip('M'))
  elif fifa21df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa21df.loc[idx, 'ClubWorth'] = float(fifa21df.loc[idx, 'ClubWorth'].rstrip('B'))*1000

fifa21df.head(20)

fifa21df.info()

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

fifa_21_names = pd.DataFrame(fifa21df.name.unique(),columns = ['names'])
fifa_21_names

"""# **Fifa 20 adatelőkészítés**

---


"""

fifa20df = fifa20df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa20df['MidfieldRating'] = fifa20df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa20df['DefenceRating'] = fifa20df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa20df['ClubWorth'] = fifa20df['ClubWorth'].map(lambda x: x.lstrip('Club Worth€'))
fifa20df['XIAverageAge'] = fifa20df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa20df['DefenceWidth'] = fifa20df['DefenceWidth'].map(lambda x: x.lstrip('Team Width')).astype(float)*10
fifa20df['DefenceDepth'] = fifa20df['DefenceDepth'].map(lambda x: x.lstrip('Depth')).astype(float)*10
fifa20df['OffenceWidth'] = fifa20df['OffenceWidth'].map(lambda x: x.lstrip('Width')).astype(float)*10

for idx in fifa20df.index: 
  if fifa20df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa20df.loc[idx, 'ClubWorth'] = float(fifa20df.loc[idx, 'ClubWorth'].rstrip('M'))
  elif fifa20df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa20df.loc[idx, 'ClubWorth'] = float(fifa20df.loc[idx, 'ClubWorth'].rstrip('B'))*1000

fifa20df.head(20)

fifa_20_names = pd.DataFrame(fifa20df.name.unique(),columns = ['names'])
fifa_20_names

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

"""# **Fifa 19 adatelőkészítés**

---


"""

fifa19df = fifa19df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa19df['MidfieldRating'] = fifa19df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa19df['DefenceRating'] = fifa19df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa19df['ClubWorth'] = fifa19df['ClubWorth'].map(lambda x: x.lstrip('Club Worth€'))
fifa19df['XIAverageAge'] = fifa19df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa19df['DefenceWidth'] = fifa19df['DefenceWidth'].map(lambda x: x.lstrip('Team Width')).astype(float)*10
fifa19df['DefenceDepth'] = fifa19df['DefenceDepth'].map(lambda x: x.lstrip('Depth')).astype(float)*10
fifa19df['OffenceWidth'] = fifa19df['OffenceWidth'].map(lambda x: x.lstrip('Width')).astype(float)*10

for idx in fifa19df.index: 
  if fifa19df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa19df.loc[idx, 'ClubWorth'] = float(fifa19df.loc[idx, 'ClubWorth'].rstrip('M'))
  elif fifa19df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa19df.loc[idx, 'ClubWorth'] = float(fifa19df.loc[idx, 'ClubWorth'].rstrip('B'))*1000

fifa19df.head(20)

fifa_19_names = pd.DataFrame(fifa19df.name.unique(),columns = ['names'])
fifa_19_names

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

"""# **Fifa 18 adatelőkészítés**

---


"""

fifa18df = fifa18df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa18df['MidfieldRating'] = fifa18df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa18df['DefenceRating'] = fifa18df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa18df['ClubWorth'] = fifa18df['ClubWorth'].map(lambda x: x.lstrip('Club Worth€'))
fifa18df['XIAverageAge'] = fifa18df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa18df['DefenceWidth'] = fifa18df['DefenceWidth'].map(lambda x: x.lstrip('Team WidthNormal '))
fifa18df['DefenceWidth'] = fifa18df['DefenceWidth'].map(lambda x: x.lstrip('w')).astype(float)
fifa18df['DefenceDepth'] = fifa18df['DefenceDepth'].map(lambda x: x.lstrip('PressureMedium'))
fifa18df['DefenceDepth'] = fifa18df['DefenceDepth'].map(lambda x: x.lstrip('High'))
fifa18df['DefenceDepth'] = fifa18df['DefenceDepth'].map(lambda x: x.lstrip('Deep')).astype(float)
fifa18df['OffenceWidth'] = fifa18df['OffenceWidth'].map(lambda x: x.lstrip('CrossingNormal'))
fifa18df['OffenceWidth'] = fifa18df['OffenceWidth'].map(lambda x: x.lstrip('Lots'))
fifa18df['OffenceWidth'] = fifa18df['OffenceWidth'].map(lambda x: x.lstrip('ittle')).astype(float)

for idx in fifa18df.index: 
  if fifa18df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa18df.loc[idx, 'ClubWorth'] = float(fifa18df.loc[idx, 'ClubWorth'].rstrip('M'))
  elif fifa18df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa18df.loc[idx, 'ClubWorth'] = float(fifa18df.loc[idx, 'ClubWorth'].rstrip('B'))*1000

fifa18df.head(20)

fifa_18_names = pd.DataFrame(fifa18df.name.unique(),columns = ['names'])
fifa_18_names

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

"""# **Fifa 17 adatelőkészítés**

---


"""

fifa17df = fifa17df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa17df['MidfieldRating'] = fifa17df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa17df['DefenceRating'] = fifa17df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa17df['ClubWorth'] = fifa17df['ClubWorth'].map(lambda x: x.lstrip('Club Worth€'))
fifa17df['XIAverageAge'] = fifa17df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa17df['DefenceWidth'] = fifa17df['DefenceWidth'].map(lambda x: x.lstrip('Team WidthNormal '))
fifa17df['DefenceWidth'] = fifa17df['DefenceWidth'].map(lambda x: x.lstrip('w')).astype(float)
fifa17df['DefenceDepth'] = fifa17df['DefenceDepth'].map(lambda x: x.lstrip('PressureMedium'))
fifa17df['DefenceDepth'] = fifa17df['DefenceDepth'].map(lambda x: x.lstrip('High'))
fifa17df['DefenceDepth'] = fifa17df['DefenceDepth'].map(lambda x: x.lstrip('Deep')).astype(float)
fifa17df['OffenceWidth'] = fifa17df['OffenceWidth'].map(lambda x: x.lstrip('CrossingNormal'))
fifa17df['OffenceWidth'] = fifa17df['OffenceWidth'].map(lambda x: x.lstrip('Lots'))
fifa17df['OffenceWidth'] = fifa17df['OffenceWidth'].map(lambda x: x.lstrip('ittle')).astype(float)

for idx in fifa17df.index: 
  if fifa17df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa17df.loc[idx, 'ClubWorth'] = float(fifa17df.loc[idx, 'ClubWorth'].rstrip('M'))
  elif fifa17df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa17df.loc[idx, 'ClubWorth'] = float(fifa17df.loc[idx, 'ClubWorth'].rstrip('B'))*1000

fifa17df.head(20)

fifa_17_names = pd.DataFrame(fifa17df.name.unique(),columns = ['names'])
fifa_17_names

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

"""# **Fifa 16 adatelőkészítés**

---


"""

fifa16df = fifa16df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa16df['MidfieldRating'] = fifa16df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa16df['DefenceRating'] = fifa16df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa16df['Transfer Budget'] = fifa16df['Transfer Budget'].map(lambda x: x.lstrip('Transfer Budget€'))
fifa16df['XIAverageAge'] = fifa16df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa16df['DefenceWidth'] = fifa16df['DefenceWidth'].map(lambda x: x.lstrip('Team WidthNormal ')).astype(float)
fifa16df['DefenceDepth'] = fifa16df['DefenceDepth'].map(lambda x: x.lstrip('PressureMedium')).astype(float)
fifa16df['OffenceWidth'] = fifa16df['OffenceWidth'].map(lambda x: x.lstrip('CrossingNormal')).astype(float)

fifa16df.rename(columns = {'Transfer Budget': 'ClubWorth'},inplace=True)

for idx in fifa16df.index: 
  if fifa16df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa16df.loc[idx, 'ClubWorth'] = float(fifa16df.loc[idx, 'ClubWorth'].rstrip('M'))*30
  elif fifa16df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa16df.loc[idx, 'ClubWorth'] = float(fifa16df.loc[idx, 'ClubWorth'].rstrip('B'))*1000*30

fifa16df.head(20)

fifa_16_names = pd.DataFrame(fifa16df.name.unique(),columns = ['names'])
fifa_16_names

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

"""# **Fifa 15 adatelőkészítés**

---


"""

fifa15df = fifa15df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa15df['MidfieldRating'] = fifa15df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa15df['DefenceRating'] = fifa15df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa15df['Transfer Budget'] = fifa15df['Transfer Budget'].map(lambda x: x.lstrip('Transfer Budget€'))
fifa15df['XIAverageAge'] = fifa15df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa15df['DefenceWidth'] = fifa15df['DefenceWidth'].map(lambda x: x.lstrip('Team WidthNormal ')).astype(float)
fifa15df['DefenceDepth'] = fifa15df['DefenceDepth'].map(lambda x: x.lstrip('PressureMedium')).astype(float)
fifa15df['OffenceWidth'] = fifa15df['OffenceWidth'].map(lambda x: x.lstrip('CrossingNormal')).astype(float)

fifa15df.rename(columns = {'Transfer Budget': 'ClubWorth'},inplace=True)

for idx in fifa15df.index: 
  if fifa15df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa15df.loc[idx, 'ClubWorth'] = float(fifa15df.loc[idx, 'ClubWorth'].rstrip('M'))*30
  elif fifa15df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa15df.loc[idx, 'ClubWorth'] = float(fifa15df.loc[idx, 'ClubWorth'].rstrip('B'))*1000*30
  elif fifa15df.loc[idx, 'ClubWorth'].strip()[-1] == 'K':
    fifa15df.loc[idx, 'ClubWorth'] = float(fifa15df.loc[idx, 'ClubWorth'].rstrip('K'))/1000*30

fifa15df.head(20)

fifa_15_names = pd.DataFrame(fifa15df.name.unique(),columns = ['names'])
fifa_15_names

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

"""# **Fifa 14 adatelőkészítés**

---


"""

fifa14df = fifa14df.drop(['teams', 'web-scraper-order', 'web-scraper-start-url', 'teams-href'], axis='columns')

fifa14df['MidfieldRating'] = fifa14df['MidfieldRating'].map(lambda x: x.rstrip('Midfield')).astype(float)
fifa14df['DefenceRating'] = fifa14df['DefenceRating'].map(lambda x: x.rstrip('Defence')).astype(float)
fifa14df['Transfer Budget'] = fifa14df['Transfer Budget'].map(lambda x: x.lstrip('Transfer Budget€'))
fifa14df['XIAverageAge'] = fifa14df['XIAverageAge'].map(lambda x: x.lstrip('Starting XI Average Age')).astype(float)
fifa14df['DefenceWidth'] = fifa14df['DefenceWidth'].map(lambda x: x.lstrip('Team WidthNormal ')).astype(float)
fifa14df['DefenceDepth'] = fifa14df['DefenceDepth'].map(lambda x: x.lstrip('PressureMedium')).astype(float)
fifa14df['OffenceWidth'] = fifa14df['OffenceWidth'].map(lambda x: x.lstrip('CrossingNormal'))
fifa14df['OffenceWidth'] = fifa14df['OffenceWidth'].map(lambda x: x.lstrip('Lots'))
fifa14df['OffenceWidth'] = fifa14df['OffenceWidth'].map(lambda x: x.lstrip('ittle')).astype(float)

fifa14df.rename(columns = {'Transfer Budget': 'ClubWorth'},inplace=True)

for idx in fifa14df.index: 
  if fifa14df.loc[idx, 'ClubWorth'].strip()[-1] == 'M':
    fifa14df.loc[idx, 'ClubWorth'] = float(fifa14df.loc[idx, 'ClubWorth'].rstrip('M'))*30
  elif fifa14df.loc[idx, 'ClubWorth'].strip()[-1] == 'B':
    fifa14df.loc[idx, 'ClubWorth'] = float(fifa14df.loc[idx, 'ClubWorth'].rstrip('B'))*1000*30
  elif fifa14df.loc[idx, 'ClubWorth'].strip()[-1] == 'K':
    fifa14df.loc[idx, 'ClubWorth'] = float(fifa14df.loc[idx, 'ClubWorth'].rstrip('K'))/1000*30

fifa14df.head(20)

fifa_14_names = pd.DataFrame(fifa14df.name.unique(),columns = ['names'])
fifa_14_names

'''if(fifa21df['ClubWorth'].str[-1:].all() == 'B'):
  fifa21df['ClubWorth'] = fifa21df['ClubWorth'].map(lambda x: x.rstrip('B')).astype(float)
  fifa21df = fifa21df.assign(ClubWorth=lambda x: x.ClubWorth*1000)'''

"""# **Nevek gyűjtése**

---


"""

fifateamnames = fifa_21_names.append([fifa_20_names,fifa_19_names,fifa_18_names,fifa_17_names,fifa_16_names,fifa_15_names,fifa_14_names])
fifateamnames.names.unique()

"""Létrehoztam egy segédadathalmazt, ami a neveket köti össze, így könnyebb lesz az adathalmazok összefésülése"""

namehelp_df = pd.DataFrame(
    {'dataname':['Alaves'          , 'Almeria'               ,'Ath Bilbao'             , 'Atl. Madrid'      ,   'Barcelona', 'Betis'             ,'Cadiz CF', 'Celta Vigo'     , 'Cordoba'  , 'Dep. La Coruna'       , 'Eibar'  , 'Elche'  , 'Espanyol'                , 'Getafe'  , 'Gijon'                 , 'Girona'  , 'Granada CF', 'Huesca'  , 'Las Palmas'               , 'Leganes'  , 'Levante'               , 'Malaga'  , 'Mallorca'   , 'Osasuna'  ,'Rayo Vallecano', 'Real Madrid'  ,'Real Sociedad', 'Sevilla'  , 'Valencia'  , 'Valladolid'       , 'Villarreal'  ],
    'fifaname':['Deportivo Alavés','Unión Deportiva Almería','Athletic Club de Bilbao','Atlético de Madrid','FC Barcelona','Real Betis Balompié','Cádiz CF','RC Celta de Vigo','Córdoba CF','Deportivo de La Coruña','SD Eibar','Elche CF','RCD Espanyol de Barcelona','Getafe CF','Real Sporting de Gijón','Girona FC', 'Granada CF','SD Huesca','Unión Deportiva Las Palmas','CD Leganés','Levante Unión Deportiva','Málaga CF','RCD Mallorca','CA Osasuna','Rayo Vallecano','Real Madrid CF','Real Sociedad','Sevilla FC','Valencia CF','Real Valladolid CF','Villarreal CF']
    })

namehelp_df

"""# **Adat betöltés**

---

az első modell készítéséhez használt adathalmaz, kiegészítve a modell jóslataival
"""

df = pd.read_csv('/content/drive/MyDrive/aszakdoga/data//data2/neuralpredicted_data1.csv')

df.head()

df['date'] = pd.to_datetime(df['date'], dayfirst = True, errors='coerce')

df.head(10)

df = df.dropna()

df.info()

df.isnull().sum()

"""# **+ sorok hozzáadása**

---

Létrehoztam a szezonok intervallumait
"""

seasons_interval= pd.date_range("2012-07", periods=10, freq="A-JUL")
seasons_interval

df['season'] = 0

print(df['date'].max())
print(df['date'].min())

"""Beállítottam minden csapathoz a megfelelő szezont"""

for idx in df.index:
  if(seasons_interval[0] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[1]):
    df.loc[idx, 'season'] = 2013
  if(seasons_interval[1] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[2]):
    df.loc[idx, 'season'] = 2014
  if(seasons_interval[2] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[3]):
    df.loc[idx, 'season'] = 2015
  if(seasons_interval[3] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[4]):
    df.loc[idx, 'season'] = 2016
  if(seasons_interval[4] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[5]):
    df.loc[idx, 'season'] = 2017
  if(seasons_interval[5] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[6]):
    df.loc[idx, 'season'] = 2018
  if(seasons_interval[6] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[7]):
    df.loc[idx, 'season'] = 2019
  if(seasons_interval[7] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[8]):
    df.loc[idx, 'season'] = 2020
  if(seasons_interval[8] < df.loc[idx, 'date'] and df.loc[idx, 'date'] < seasons_interval[9]):
    df.loc[idx, 'season'] = 2021

"""megvizsgáltam, hogy minden szezon ugyanannyi meccset tartalmaz-e"""

plt.figure(figsize=(16,10))
df.season.value_counts().plot(kind = 'barh')

"""Megnéztem, hogy ugyanannyi egyedi nevet tartalmaz e a fifa és a meccsek adatait tartalmazó adathalmaz, ezzel megbizonyosodva, arról, hogy az egyes szezonokban megvannak e szükséges adatok"""

print(len(df.hometeamname.unique()))
print(len(fifateamnames.names.unique()))

print(sorted(df.hometeamname.unique()))
print(sorted(fifateamnames.names.unique()))

df['home_overall'] = 0
df['away_overall'] = 0
df['home_AttackingRating'] = 0
df['away_AttackingRating'] = 0
df['home_MidfieldRating'] = 0
df['away_MidfieldRating'] = 0
df['home_DefenceRating'] = 0
df['away_DefenceRating'] = 0
df['home_ClubWorth'] = 0
df['away_ClubWorth'] = 0
df['home_XIAverageAge'] = 0
df['away_XIAverageAge'] = 0
df['home_DefenceWidth'] = 0
df['away_DefenceWidth'] = 0
df['home_DefenceDepth'] = 0
df['away_DefenceDepth'] = 0
df['home_OffenceWidth'] = 0
df['away_OffenceWidth'] = 0
df['home_Likes'] = 0
df['away_Likes'] = 0
df['home_Dislikes'] = 0
df['away_Dislikes'] = 0

"""Név alapján a hazai és vendégcsapatokhoz hozzárendeltem az az évi fifaadataikat"""

#overall	AttackingRating	MidfieldRating	DefenceRating	ClubWorth	XIAverageAge	DefenceWidth	DefenceDepth	OffenceWidth	Likes	Dislikes
def fifa_insert(idx):
  for i in namehelp_df.index:
    if(namehelp_df.loc[i,'dataname'] == df.loc[idx, 'hometeamname']):
      h_name = namehelp_df.loc[i,'fifaname']
    if(namehelp_df.loc[i,'dataname'] == df.loc[idx, 'guestteamname']):
      g_name = namehelp_df.loc[i,'fifaname']

  if(df.loc[idx, 'season'] == 2014):
    for i in fifa14df.index:
      if(fifa14df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa14df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa14df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa14df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa14df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa14df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa14df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa14df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa14df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa14df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa14df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa14df.loc[i,'Dislikes']
        
      if(fifa14df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa14df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa14df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa14df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa14df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa14df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa14df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa14df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa14df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa14df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa14df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa14df.loc[i,'Dislikes']

  if(df.loc[idx, 'season'] == 2015):
    for i in fifa15df.index:
      if(fifa15df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa15df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa15df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa15df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa15df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa15df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa15df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa15df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa15df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa15df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa15df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa15df.loc[i,'Dislikes']
        
      if(fifa15df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa15df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa15df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa15df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa15df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa15df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa15df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa15df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa15df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa15df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa15df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa15df.loc[i,'Dislikes']

  if(df.loc[idx, 'season'] == 2016):
    for i in fifa16df.index:
      if(fifa16df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa16df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa16df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa16df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa16df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa16df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa16df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa16df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa16df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa16df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa16df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa16df.loc[i,'Dislikes']
        
      if(fifa16df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa16df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa16df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa16df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa16df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa16df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa16df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa16df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa16df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa16df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa16df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa16df.loc[i,'Dislikes']

  if(df.loc[idx, 'season'] == 2017):
    for i in fifa17df.index:
      if(fifa17df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa17df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa17df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa17df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa17df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa17df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa17df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa17df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa17df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa17df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa17df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa17df.loc[i,'Dislikes']
        
      if(fifa17df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa17df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa17df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa17df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa17df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa17df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa17df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa17df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa17df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa17df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa17df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa17df.loc[i,'Dislikes']

  if(df.loc[idx, 'season'] == 2018):
    for i in fifa18df.index:
      if(fifa18df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa18df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa18df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa18df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa18df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa18df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa18df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa18df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa18df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa18df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa18df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa18df.loc[i,'Dislikes']
        
      if(fifa18df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa18df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa18df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa18df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa18df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa18df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa18df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa18df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa18df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa18df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa18df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa18df.loc[i,'Dislikes']

  if(df.loc[idx, 'season'] == 2019):
    for i in fifa19df.index:
      if(fifa19df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa19df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa19df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa19df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa19df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa19df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa19df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa19df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa19df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa19df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa19df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa19df.loc[i,'Dislikes']
        
      if(fifa19df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa19df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa19df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa19df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa19df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa19df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa19df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa19df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa19df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa19df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa19df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa19df.loc[i,'Dislikes']

  if(df.loc[idx, 'season'] == 2020):
    for i in fifa20df.index:
      if(fifa20df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa20df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa20df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa20df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa20df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa20df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa20df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa20df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa20df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa20df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa20df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa20df.loc[i,'Dislikes']
        
      if(fifa20df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa20df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa20df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa20df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa20df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa20df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa20df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa20df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa20df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa20df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa20df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa20df.loc[i,'Dislikes']

  if(df.loc[idx, 'season'] == 2021):
    for i in fifa21df.index:
      if(fifa21df.loc[i,'name'] == h_name):
        df.loc[idx,'home_overall'] = fifa21df.loc[i,'overall']
        df.loc[idx,'home_AttackingRating'] = fifa21df.loc[i,'AttackingRating']
        df.loc[idx,'home_MidfieldRating'] = fifa21df.loc[i,'MidfieldRating']
        df.loc[idx,'home_DefenceRating'] = fifa21df.loc[i,'DefenceRating']
        df.loc[idx,'home_ClubWorth'] = fifa21df.loc[i,'ClubWorth']
        df.loc[idx,'home_XIAverageAge'] = fifa21df.loc[i,'XIAverageAge']
        df.loc[idx,'home_DefenceWidth'] = fifa21df.loc[i,'DefenceWidth']
        df.loc[idx,'home_DefenceDepth'] = fifa21df.loc[i,'DefenceDepth']
        df.loc[idx,'home_OffenceWidth'] = fifa21df.loc[i,'OffenceWidth']
        df.loc[idx,'home_Likes'] = fifa21df.loc[i,'Likes']
        df.loc[idx,'home_Dislikes'] = fifa21df.loc[i,'Dislikes']
        
      if(fifa21df.loc[i,'name'] == g_name):
        df.loc[idx,'away_overall'] = fifa21df.loc[i,'overall']
        df.loc[idx,'away_AttackingRating'] = fifa21df.loc[i,'AttackingRating']
        df.loc[idx,'away_MidfieldRating'] = fifa21df.loc[i,'MidfieldRating']
        df.loc[idx,'away_DefenceRating'] = fifa21df.loc[i,'DefenceRating']
        df.loc[idx,'away_ClubWorth'] = fifa21df.loc[i,'ClubWorth']
        df.loc[idx,'away_XIAverageAge'] = fifa21df.loc[i,'XIAverageAge']
        df.loc[idx,'away_DefenceWidth'] = fifa21df.loc[i,'DefenceWidth']
        df.loc[idx,'away_DefenceDepth'] = fifa21df.loc[i,'DefenceDepth']
        df.loc[idx,'away_OffenceWidth'] = fifa21df.loc[i,'OffenceWidth']
        df.loc[idx,'away_Likes'] = fifa21df.loc[i,'Likes']
        df.loc[idx,'away_Dislikes'] = fifa21df.loc[i,'Dislikes']

for idx in df.index:
  fifa_insert(idx)

df.shape

"""Megvizsgáltam, hogy került-e null érték az adathalmazba"""

df.isnull().sum()

df.sort_values(by=['date'], inplace=True)

df.head(10)

df.columns

df = df.drop(['Unnamed: 0'],
          axis='columns')

"""kiszedtem a felesleges vagy anomáliát okozó karaktereket"""

for idx in df.index:
  df.loc[idx, 'hometeamname'] = df.loc[idx, 'hometeamname'].replace(" ", "_")
  df.loc[idx, 'hometeamname'] = df.loc[idx, 'hometeamname'].replace(".", "")
  df.loc[idx, 'guestteamname'] = df.loc[idx, 'guestteamname'].replace(" ", "_")
  df.loc[idx, 'guestteamname'] = df.loc[idx, 'guestteamname'].replace(".", "")

for idx in namehelp_df.index:
  namehelp_df.loc[idx, 'dataname'] = namehelp_df.loc[idx, 'dataname'].replace(" ", "_")
  namehelp_df.loc[idx, 'dataname'] = namehelp_df.loc[idx, 'dataname'].replace(".", "")

"""# **Csapat df létrehozás**

---

létrehozom az egyes csapatok dataframeit
"""

for idx in namehelp_df.index:
  a = namehelp_df.loc[idx, 'dataname']
  exec(a + 
       """_df = pd.DataFrame(columns = ['matches', 'hometeamname', 'guestteamname', 'homepossession',
       'guestpossession', 'homegoals', 'guestgoals', 'homegoalattempts',
       'guestgoalattempts', 'homeshotsongoal', 'guestshotsongoal',
       'homeshotsoffgoal', 'guestshotsoffgoal', 'homeblockedshots',
       'guestblockedshots', 'homefreekicks', 'guestfreekicks',
       'homecornerkicks', 'guestcornerkicks', 'date', 'bethomewinodds',
       'betdrawodds', 'betguestwinodds', 'homethrowin', 'guestthrowin',
       'GoalDiff', 'winner', 'PredictedHomeOdds', 'PredictedDrawOdds',
       'PredictedGuestOdds', 'PredictedWinner', 'HomeTeamWin', 'Draw',
       'GuestTeamWin', 'season', 'home_overall', 'away_overall',
       'home_AttackingRating', 'away_AttackingRating', 'home_MidfieldRating',
       'away_MidfieldRating', 'home_DefenceRating', 'away_DefenceRating',
       'home_ClubWorth', 'away_ClubWorth', 'home_XIAverageAge',
       'away_XIAverageAge', 'home_DefenceWidth', 'away_DefenceWidth',
       'home_DefenceDepth', 'away_DefenceDepth', 'home_OffenceWidth',
       'away_OffenceWidth', 'home_Likes', 'away_Likes', 'home_Dislikes',
       'away_Dislikes']
)""")

"""Hozzáadom a df meccseit az egyes csapatok df-hez"""

for idx in df.index:
  for i in namehelp_df.index:
    if(namehelp_df.loc[i, 'dataname'] == df.loc[idx, 'hometeamname'] or namehelp_df.loc[i, 'dataname'] == df.loc[idx, 'guestteamname']):
      #exec(namehelp_df.loc[i, 'dataname'] + "_df = pd.concat([" + namehelp_df.loc[i, 'dataname'] + "_df, df.loc[idx,:]])") 
      exec(namehelp_df.loc[i, 'dataname'] + "_df = "+ namehelp_df.loc[i, 'dataname'] + "_df.append(df.loc[idx,:],ignore_index=True)")

"""megnéztem, hogy mennyi adatból történne a tanítás az egyes osztályokra"""

matches_by_team = np.array([])
for i in namehelp_df.index:
    exec("matches_by_team = np.append(matches_by_team, len(" + namehelp_df.loc[i, 'dataname'] + "_df))")

plt.plot(matches_by_team)
plt.show()

"""megnéztem, hogy az értékek oszthatóak-e 38-cal(ennyi meccs van egy szezonban)"""

matches_by_team

Alaves_df.info()

cnames = list(Alaves_df)
cnames

for i in namehelp_df.index:
    exec( namehelp_df.loc[i, 'dataname'] + "_df = " + namehelp_df.loc[i, 'dataname'] + """_df.astype({
    'homegoals': 'float64',
    'guestgoals': 'float64',
    'homegoalattempts': 'float64',
    'guestgoalattempts': 'float64',
    'homeshotsongoal': 'float64',
    'guestshotsongoal': 'float64',
    'homeshotsoffgoal': 'float64',
    'guestshotsoffgoal': 'float64',
    'homeblockedshots': 'float64',
    'guestblockedshots': 'float64',
    'homefreekicks': 'float64',
    'guestfreekicks': 'float64',
    'homecornerkicks': 'float64',
    'guestcornerkicks': 'float64',
    'homethrowin': 'float64',
    'guestthrowin': 'float64',
    'GoalDiff': 'float64',
    'winner': 'float64',
    'PredictedWinner': 'float64',
    'season': 'float64',
    'home_overall': 'float64',
    'away_overall': 'float64',
    'home_AttackingRating': 'float64',
    'away_AttackingRating': 'float64',
    'home_ClubWorth': 'float64',
    'away_ClubWorth': 'float64',
    'home_Likes': 'float64',
    'away_Likes': 'float64',
    'home_Dislikes': 'float64',
    'away_Dislikes': 'float64',
    'homefreekicks': 'float64',
     })""")

(Betis_df == 0).sum()

for idx in Alaves_df.index:
  if Alaves_df.loc[idx, 'home_overall'] == 0:
    print(Alaves_df.loc[idx, 'season'])
    print(Alaves_df.loc[idx, 'hometeamname'])

"""# **Csapat statisztikák és adatvizualizáció**

---


"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
print("Setup Complete")

import statistics

from matplotlib.pyplot import hist

"""Létrehoztam egy új DataFramet, hogy a csapatok adatait, amiket majd az adathalmazhoz fogok használni ebbe tudjam beletölteni."""

statistics_df = pd.DataFrame(columns = ['teamname','matches_played','overall', 'AttackingRating', 'MidfieldRating', 'DefenceRating',
       'ClubWorth', 'XIAverageAge', 'DefenceWidth', 'DefenceDepth',
       'OffenceWidth', 'Likes', 'Dislikes',
       'avgoals', 'avconceded', 'avgoalattempts',
       'avshotsongoal', 'avshotsoffgoal', 'avblockedshots',
       'avpossession', 'avfreekicks', 'avGoalDiff', 'avwins',
       'avdraws', 'avloses']
)

"""Korrelációs mátrixot hoztam létre a klub fifa adataiból, amiket feltöltöttem aszerint, hogy mikorról vannak érvényes fifa adatok utoljára. Az idei szezonban szereplő csapatokról természetes a legújabb adatok érhetőek el, de vannak csapatok, akik utoljára 2015-ben szerepeltek elsőosztályban, így náluk azokat kellett használnom

Elérhető lesz a csapatoktól meccs statisztikákra alapuló mátrix is. Ezeket az ábrákat a drivera mentve képzi a program, mivel az alkalmazásban a modell csak jósolni fog tudni, az adathalmazhoz már nem fog hozzáférni.
"""

def teamprematchcorrplot(teamdf,teamname):
  teamdf = teamdf.drop(['hometeamname',
      'guestteamname',
      'homepossession',
      'guestpossession',
      'homegoals',
      'guestgoals',
      'homegoalattempts',
      'guestgoalattempts',
      'homeshotsongoal',
      'guestshotsongoal',
      'homeshotsoffgoal',
      'guestshotsoffgoal',
      'homeblockedshots',
      'guestblockedshots',
      'homefreekicks',
      'guestfreekicks',
      'homecornerkicks',
      'guestcornerkicks',
      'date',
      'bethomewinodds',
      'betdrawodds',
      'betguestwinodds',
      'homethrowin',
      'guestthrowin',
      'HomeTeamWin',
      'Draw',
      'GuestTeamWin',
      'PredictedHomeOdds',
      'PredictedDrawOdds',
      'PredictedGuestOdds',
      'PredictedWinner',
       'season'],axis=1)
  correlation_df = teamdf.corr()

  correlation_df = correlation_df.drop([
    'home_overall',
    'away_overall',
    'home_AttackingRating',
    'away_AttackingRating',
    'home_MidfieldRating',
    'away_MidfieldRating',
    'home_DefenceRating',
    'away_DefenceRating',
    'home_ClubWorth',
    'away_ClubWorth',
    'home_XIAverageAge',
    'away_XIAverageAge',
    'home_DefenceWidth',
    'away_DefenceWidth',
    'home_DefenceDepth',
    'away_DefenceDepth',
    'home_OffenceWidth',
    'away_OffenceWidth',
    'home_Likes',
    'away_Likes',
    'home_Dislikes',
    'away_Dislikes',
    #'HomeForm',
    #'AwayForm'
    ], axis = 1)
  plt.figure(figsize=(25,65))
  plt.title(label = str(teamname)+" korreláció mátrixa (csapat infó)",fontsize=80,pad=30) 
  sns.set(font_scale=9)
  sns.heatmap(correlation_df, annot=True)
  #plt.imsave(arr = MxNx3, format='png',fname = '/content/drive/MyDrive/aszakdoga/kepek/'+ teamname + 'prematchcorr')
  plt.savefig(format='png',fname = '/content/drive/MyDrive/aszakdoga/kepek/pre/'+ teamname.lower() + 'prematchcorr',bbox_inches = 'tight')
  plt.show()
  '''plt.figure(figsize=(20,20))

  plt.subplot(3,3,1)
  sns.regplot(x=df['GoalDiff'], y=df['home_overall'] - df['away_overall'])

  plt.subplot(3,3,2)
  sns.regplot(x=df['GoalDiff'], y=df['home_AttackingRating'] - df['away_AttackingRating'])


  for idx in namehelp_df.index:
    if(namehelp_df.loc[idx,'dataname'] == teamname):
      fifateamname = namehelp_df.loc[idx,'fifaname']


  for idx in teamdf.index:
    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      goals.append(teamdf.loc[idx, 'homegoals'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      goals.append(teamdf.loc[idx, 'guestgoals'])'''

def teamaftmatchcorrplot(teamdf,teamname):
  teamdf = teamdf.drop([
      'hometeamname',
      'guestteamname',
      'home_overall',
      'away_overall',
      'home_AttackingRating',
      'away_AttackingRating',
      'home_MidfieldRating',
      'away_MidfieldRating',
      'home_DefenceRating',
      'away_DefenceRating',
      'home_ClubWorth',
      'away_ClubWorth',
      'home_XIAverageAge',
      'away_XIAverageAge',
      'home_DefenceWidth',
      'away_DefenceWidth',
      'home_DefenceDepth',
      'away_DefenceDepth',
      'home_OffenceWidth',
      'away_OffenceWidth',
      'home_Likes',
      'away_Likes',
      'home_Dislikes',
      'away_Dislikes',
      #'HomeForm',
      #'AwayForm',
      'date',
      'bethomewinodds',
      'betdrawodds',
      'betguestwinodds',
      'homethrowin',
      'guestthrowin',
      'HomeTeamWin',
      'Draw',
      'GuestTeamWin',
      'PredictedHomeOdds',
      'PredictedDrawOdds',
      'PredictedGuestOdds',
      'PredictedWinner',
      'homegoals',
      'guestgoals',
       'season'],axis=1)
  correlation_df = teamdf.corr()

  correlation_df = correlation_df.drop([
      'homepossession',
      'guestpossession',
      'homegoalattempts',
      'guestgoalattempts',
      'homeshotsongoal',
      'guestshotsongoal',
      'homeshotsoffgoal',
      'guestshotsoffgoal',
      'homeblockedshots',
      'guestblockedshots',
      'homefreekicks',
      'guestfreekicks',
      'homecornerkicks',
      'guestcornerkicks'], axis = 1)
  plt.figure(figsize=(25,65))
  #plt.figure(figsize=(25,45))
  plt.title(label = str(teamname)+" korreláció mátrixa (statisztikai)",fontsize=60, pad=30) 
  sns.heatmap(correlation_df, annot=True)
  sns.set(font_scale=9)
  plt.savefig(format='png',fname = '/content/drive/MyDrive/aszakdoga/kepek/after/'+ teamname.lower() + 'aftmatchcorr',bbox_inches = 'tight')
  plt.show()

def teamhistogramplot(teamdf,teamname):
    plt.figure(figsize=(25,40))
    sns.set(font_scale=4)
    plt.subplot(3,2,1)
    plot_df = teamdf.groupby('GoalDiff', as_index=False)['homepossession'].mean()
    plot_df.plot.line('GoalDiff',ax=plt.gca())

    plt.subplot(3,2,2)
    plot_df = teamdf.groupby('GoalDiff', as_index=False)['homegoalattempts'].mean()
    plot_df.plot.line('GoalDiff',ax=plt.gca())

    plt.subplot(3,2,3)
    plot_df = teamdf.groupby('GoalDiff', as_index=False)['homeshotsongoal'].mean()
    plot_df.plot.line('GoalDiff',ax=plt.gca())

    plt.subplot(3,2,4)
    plot_df = teamdf.groupby('GoalDiff', as_index=False)['homeshotsoffgoal'].mean()
    plot_df.plot.line('GoalDiff',ax=plt.gca())

    plt.subplot(3,2,5)
    plot_df = teamdf.groupby('GoalDiff', as_index=False)['homeblockedshots'].mean()
    plot_df.plot.line('GoalDiff',ax=plt.gca())

    plt.subplot(3,2,6)
    plot_df = teamdf.groupby('GoalDiff', as_index=False)['homefreekicks'].mean()
    plot_df.plot.line('GoalDiff',ax=plt.gca())
    plt.savefig(format='png',fname = '/content/drive/MyDrive/aszakdoga/kepek/after/'+ teamname.lower() + 'stat',bbox_inches = 'tight')
    plt.show()

def teamstats(teamdf,teamname):
  matches_played = len(teamdf.index)
  overall = 0
  AttackingRating = 0
  MidfieldRating = 0
  DefenceRating = 0
  ClubWorth = 0
  XIAverageAge = 0
  DefenceWidth = 0
  DefenceDepth = 0
  OffenceWidth = 0
  Likes = 0
  Dislikes = 0
  for idx in namehelp_df.index:
    if(namehelp_df.loc[idx,'dataname'] == teamname):
      fifateamname = namehelp_df.loc[idx,'fifaname']

  for i in fifa22df.index:
    if(fifateamname == fifa22df.loc[i,'name']):
      overall = fifa22df.loc[i,'overall']
      AttackingRating = fifa22df.loc[i,'AttackingRating']
      MidfieldRating = fifa22df.loc[i,'MidfieldRating']
      DefenceRating = fifa22df.loc[i,'DefenceRating']
      ClubWorth = fifa22df.loc[i,'ClubWorth']
      XIAverageAge = fifa22df.loc[i,'XIAverageAge']
      DefenceWidth = fifa22df.loc[i,'DefenceWidth']
      DefenceDepth = fifa22df.loc[i,'DefenceDepth']
      OffenceWidth = fifa22df.loc[i,'OffenceWidth']
      Likes = fifa22df.loc[i,'Likes']
      Dislikes = fifa22df.loc[i,'Dislikes']

  if overall == 0:
    for i in fifa21df.index:
      if(fifateamname == fifa21df.loc[i,'name']):
        overall = fifa21df.loc[i,'overall']
        AttackingRating = fifa21df.loc[i,'AttackingRating']
        MidfieldRating = fifa21df.loc[i,'MidfieldRating']
        DefenceRating = fifa21df.loc[i,'DefenceRating']
        ClubWorth = fifa21df.loc[i,'ClubWorth']
        XIAverageAge = fifa21df.loc[i,'XIAverageAge']
        DefenceWidth = fifa21df.loc[i,'DefenceWidth']
        DefenceDepth = fifa21df.loc[i,'DefenceDepth']
        OffenceWidth = fifa21df.loc[i,'OffenceWidth']
        Likes = fifa21df.loc[i,'Likes']
        Dislikes = fifa21df.loc[i,'Dislikes']

  if overall == 0:
    for i in fifa20df.index:
      if(fifateamname == fifa20df.loc[i,'name']):
        overall = fifa20df.loc[i,'overall']
        AttackingRating = fifa20df.loc[i,'AttackingRating']
        MidfieldRating = fifa20df.loc[i,'MidfieldRating']
        DefenceRating = fifa20df.loc[i,'DefenceRating']
        ClubWorth = fifa20df.loc[i,'ClubWorth']
        XIAverageAge = fifa20df.loc[i,'XIAverageAge']
        DefenceWidth = fifa20df.loc[i,'DefenceWidth']
        DefenceDepth = fifa20df.loc[i,'DefenceDepth']
        OffenceWidth = fifa20df.loc[i,'OffenceWidth']
        Likes = fifa20df.loc[i,'Likes']
        Dislikes = fifa20df.loc[i,'Dislikes']

  if overall == 0:
    for i in fifa19df.index:
      if(fifateamname == fifa19df.loc[i,'name']):
        overall = fifa19df.loc[i,'overall']
        AttackingRating = fifa19df.loc[i,'AttackingRating']
        MidfieldRating = fifa19df.loc[i,'MidfieldRating']
        DefenceRating = fifa19df.loc[i,'DefenceRating']
        ClubWorth = fifa19df.loc[i,'ClubWorth']
        XIAverageAge = fifa19df.loc[i,'XIAverageAge']
        DefenceWidth = fifa19df.loc[i,'DefenceWidth']
        DefenceDepth = fifa19df.loc[i,'DefenceDepth']
        OffenceWidth = fifa19df.loc[i,'OffenceWidth']
        Likes = fifa19df.loc[i,'Likes']
        Dislikes = fifa19df.loc[i,'Dislikes']

  if overall == 0:
    for i in fifa18df.index:
      if(fifateamname == fifa18df.loc[i,'name']):
        overall = fifa18df.loc[i,'overall']
        AttackingRating = fifa18df.loc[i,'AttackingRating']
        MidfieldRating = fifa18df.loc[i,'MidfieldRating']
        DefenceRating = fifa18df.loc[i,'DefenceRating']
        ClubWorth = fifa18df.loc[i,'ClubWorth']
        XIAverageAge = fifa18df.loc[i,'XIAverageAge']
        DefenceWidth = fifa18df.loc[i,'DefenceWidth']
        DefenceDepth = fifa18df.loc[i,'DefenceDepth']
        OffenceWidth = fifa18df.loc[i,'OffenceWidth']
        Likes = fifa18df.loc[i,'Likes']
        Dislikes = fifa18df.loc[i,'Dislikes']

  if overall == 0:
    for i in fifa17df.index:
      if(fifateamname == fifa17df.loc[i,'name']):
        overall = fifa17df.loc[i,'overall']
        AttackingRating = fifa17df.loc[i,'AttackingRating']
        MidfieldRating = fifa17df.loc[i,'MidfieldRating']
        DefenceRating = fifa17df.loc[i,'DefenceRating']
        ClubWorth = fifa17df.loc[i,'ClubWorth']
        XIAverageAge = fifa17df.loc[i,'XIAverageAge']
        DefenceWidth = fifa17df.loc[i,'DefenceWidth']
        DefenceDepth = fifa17df.loc[i,'DefenceDepth']
        OffenceWidth = fifa17df.loc[i,'OffenceWidth']
        Likes = fifa17df.loc[i,'Likes']
        Dislikes = fifa17df.loc[i,'Dislikes']

  if overall == 0:
    for i in fifa15df.index:
      if(fifateamname == fifa15df.loc[i,'name']):
        overall = fifa15df.loc[i,'overall']
        AttackingRating = fifa15df.loc[i,'AttackingRating']
        MidfieldRating = fifa15df.loc[i,'MidfieldRating']
        DefenceRating = fifa15df.loc[i,'DefenceRating']
        ClubWorth = fifa15df.loc[i,'ClubWorth']
        XIAverageAge = fifa15df.loc[i,'XIAverageAge']
        DefenceWidth = fifa15df.loc[i,'DefenceWidth']
        DefenceDepth = fifa15df.loc[i,'DefenceDepth']
        OffenceWidth = fifa15df.loc[i,'OffenceWidth']
        Likes = fifa15df.loc[i,'Likes']
        Dislikes = fifa15df.loc[i,'Dislikes']
  

  goals = []
  conceded = []
  GoalDiff = []

  goalattempts = []
  shotsongoal = []
  shotsoffgoal = []
  blockedshots = []
  possession = []
  freekicks = []

  wins = []
  draws = []
  loses = []

  

  for idx in teamdf.index:
    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      goals.append(teamdf.loc[idx, 'homegoals'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      goals.append(teamdf.loc[idx, 'guestgoals'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      conceded.append(teamdf.loc[idx, 'guestgoals'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      conceded.append(teamdf.loc[idx, 'homegoals'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      GoalDiff.append(teamdf.loc[idx, 'GoalDiff'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      GoalDiff.append(teamdf.loc[idx, 'GoalDiff'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      goalattempts.append(teamdf.loc[idx, 'homegoalattempts'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      goalattempts.append(teamdf.loc[idx, 'guestgoalattempts'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      shotsongoal.append(teamdf.loc[idx, 'homeshotsongoal'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      shotsongoal.append(teamdf.loc[idx, 'guestshotsongoal'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      shotsoffgoal.append(teamdf.loc[idx, 'homeshotsoffgoal'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      shotsoffgoal.append(teamdf.loc[idx, 'guestshotsoffgoal'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      blockedshots.append(teamdf.loc[idx, 'homeblockedshots'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      blockedshots.append(teamdf.loc[idx, 'guestblockedshots'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      possession.append(teamdf.loc[idx, 'homepossession'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      possession.append(teamdf.loc[idx, 'guestpossession'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      freekicks.append(teamdf.loc[idx, 'homefreekicks'])
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      freekicks.append(teamdf.loc[idx, 'guestfreekicks'])

    if(teamdf.loc[idx, 'hometeamname'] == teamname):
      if teamdf.loc[idx, 'winner'] == 1:
        wins.append(1)
        draws.append(0)
        loses.append(0)
      elif teamdf.loc[idx, 'winner'] == 0:
        wins.append(0)
        draws.append(1)
        loses.append(0)
      elif teamdf.loc[idx, 'winner'] == -1:
        wins.append(0)
        draws.append(0)
        loses.append(1)
    if(teamdf.loc[idx, 'guestteamname'] == teamname):
      if teamdf.loc[idx, 'winner'] == 1:
        wins.append(0)
        draws.append(0)
        loses.append(1)
      elif teamdf.loc[idx, 'winner'] == 0:
        wins.append(0)
        draws.append(1)
        loses.append(0)
      elif teamdf.loc[idx, 'winner'] == -1:
        wins.append(1)
        draws.append(0)
        loses.append(0)


  avgoals = statistics.mean(goals)
  avconceded = statistics.mean(conceded)
  avGoalDiff = statistics.mean(GoalDiff)

  avgoalattempts = statistics.mean(goalattempts)
  avshotsongoal = statistics.mean(shotsongoal)
  avshotsoffgoal = statistics.mean(shotsoffgoal)
  avblockedshots = statistics.mean(blockedshots)
  avpossession = statistics.mean(possession)
  avfreekicks = statistics.mean(freekicks)

  avwins = statistics.mean(wins)
  avdraws = statistics.mean(draws)
  avloses = statistics.mean(loses)


  new_row = {
      'teamname': teamname,
      'matches_played': matches_played,
      'overall':overall,
      'AttackingRating':AttackingRating,
      'MidfieldRating': MidfieldRating,
      'DefenceRating': DefenceRating,
      'ClubWorth':ClubWorth,
      'XIAverageAge':XIAverageAge,
      'DefenceWidth':DefenceWidth,
      'DefenceDepth':DefenceDepth,
      'OffenceWidth':OffenceWidth,
      'Likes':Likes,
      'Dislikes':Dislikes,
      'avgoals':avgoals,
      'avconceded':avconceded,
      'avgoalattempts':avgoalattempts,
      'avshotsongoal':avshotsongoal,
      'avshotsoffgoal':avshotsoffgoal,
      'avblockedshots':avblockedshots,
      'avpossession': avpossession,
      'avfreekicks':avfreekicks,
      'avGoalDiff':avGoalDiff,
      'avwins':avwins,
      'avdraws':avdraws,
      'avloses':avloses,
  }

  teamprematchcorrplot(teamdf,teamname)
  teamaftmatchcorrplot(teamdf,teamname)
  teamhistogramplot(teamdf,teamname)
  return new_row

#statisticsdf + diagramok létrehozása
for i in namehelp_df.index:
    teamname = str(namehelp_df.loc[i, 'dataname'])
    exec("teamdf = "+ namehelp_df.loc[i, 'dataname'] +"_df")
    aprow = teamstats(teamdf,teamname)
    statistics_df = statistics_df.append(aprow, ignore_index=True)

statistics_df.head()

statistics_df.to_csv(path_or_buf = '/content/drive/MyDrive/aszakdoga/data/sofifa/statistics_df.csv')

"""vizualizáció

# **Formaszámítás**

---

for idx in namehelp_df.index:
    exec(
        namehelp_df.loc[idx, 'dataname'] + "_df.reset_index()\n" +
        namehelp_df.loc[idx, 'dataname'] + "_df['Form'] = 0\n" +
        "for i in " + namehelp_df.loc[idx, 'dataname'] + "_df.index:\n" +
        "  form_counter = 0\n" + 
        "  if(i >= 5):\n" +
        "    for idxform in range(1,6):\n" +
        "      if " + namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'hometeamname'] ==" + namehelp_df.loc[idx, 'dataname'] + ":\n" +
        "        if " +  namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'winner'] == 1:\n" +
        "          form_counter += 3\n" +
        "        elif " +  namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'winner'] == 0:\n" +
        "          form_counter += 1\n" +
        "        elif " +  namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'winner'] == -1:\n" +
        "          form_counter += 0\n" +
        "      if " + namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'guestteamname'] ==" + namehelp_df.loc[idx, 'dataname'] + ":\n" +
        "        if " +  namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'winner'] == 1:\n" +
        "          form_counter += 0\n" +
        "        elif " +  namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'winner'] == 0:\n" +
        "          form_counter += 1\n" +
        "        elif " +  namehelp_df.loc[idx, 'dataname'] + "_df.loc[i-idxform, 'winner'] == -1:\n" +
        "          form_counter += 3\n" +
        "   " + namehelp_df.loc[idx, 'dataname'] + "_df.loc[i, 'Form'] = form_counter\n"
          )

Minden csapat adathalmazának minden sorára kiszámolja a formát
"""

for idx in namehelp_df.index:
  exec("team_df  = " + namehelp_df.loc[idx, 'dataname'] + "_df")
  team_df.reset_index()
  team_df['HomeForm'] = 0
  team_df['AwayForm'] = 0
  for i in team_df.index:
    form_counter = 0
    if(i >= 5):
      for idxform in range(1,6):
        if team_df.loc[i-idxform, 'hometeamname'] ==  namehelp_df.loc[idx, 'dataname']:
          if team_df.loc[i-idxform, 'winner'] == 1:
            form_counter += 3
          elif team_df.loc[i-idxform, 'winner'] == 0:
            form_counter += 1
          elif team_df.loc[i-idxform, 'winner'] == -1:
            form_counter += 0
        elif team_df.loc[i-idxform, 'guestteamname'] ==  namehelp_df.loc[idx, 'dataname']:
          if team_df.loc[i-idxform, 'winner'] == 1:
            form_counter += 0
          elif team_df.loc[i-idxform, 'winner'] == 0:
            form_counter += 1
          elif team_df.loc[i-idxform, 'winner'] == -1:
            form_counter += 3
#attól függően, hogy hazai vagy idegenben játszik, azt az oszlopot állítjuk be
    if(team_df.loc[i, 'hometeamname'] ==  namehelp_df.loc[idx, 'dataname']):
      team_df.loc[i, 'HomeForm'] = form_counter
    if(team_df.loc[i, 'guestteamname'] ==  namehelp_df.loc[idx, 'dataname']):
      team_df.loc[i, 'AwayForm'] = form_counter
#első 5 sor átlagbeállítás
  for i in range(0,5):
    if(team_df.loc[i, 'hometeamname'] ==  namehelp_df.loc[idx, 'dataname']):
      team_df.loc[i, 'HomeForm'] = round(team_df['HomeForm'].mean())*2
  
    if(team_df.loc[i, 'guestteamname'] ==  namehelp_df.loc[idx, 'dataname']):
      team_df.loc[i, 'AwayForm'] = round(team_df['AwayForm'].mean())*2

"""df törlése és új készítés"""

del df
df = pd.DataFrame(columns = 
                  ['matches', 'hometeamname', 'guestteamname', 'homepossession',
       'guestpossession', 'homegoals', 'guestgoals', 'homegoalattempts',
       'guestgoalattempts', 'homeshotsongoal', 'guestshotsongoal',
       'homeshotsoffgoal', 'guestshotsoffgoal', 'homeblockedshots',
       'guestblockedshots', 'homefreekicks', 'guestfreekicks',
       'homecornerkicks', 'guestcornerkicks', 'date', 'bethomewinodds',
       'betdrawodds', 'betguestwinodds', 'homethrowin', 'guestthrowin',
       'GoalDiff', 'winner', 'PredictedHomeOdds', 'PredictedDrawOdds',
       'PredictedGuestOdds', 'PredictedWinner', 'HomeTeamWin', 'Draw',
       'GuestTeamWin', 'season', 'home_overall', 'away_overall',
       'home_AttackingRating', 'away_AttackingRating', 'home_MidfieldRating',
       'away_MidfieldRating', 'home_DefenceRating', 'away_DefenceRating',
       'home_ClubWorth', 'away_ClubWorth', 'home_XIAverageAge',
       'away_XIAverageAge', 'home_DefenceWidth', 'away_DefenceWidth',
       'home_DefenceDepth', 'away_DefenceDepth', 'home_OffenceWidth',
       'away_OffenceWidth', 'home_Likes', 'away_Likes', 'home_Dislikes',
       'away_Dislikes'
       ])
newdf = pd.DataFrame(columns = 
                  ['matches', 'hometeamname', 'guestteamname', 'homepossession',
       'guestpossession', 'homegoals', 'guestgoals', 'homegoalattempts',
       'guestgoalattempts', 'homeshotsongoal', 'guestshotsongoal',
       'homeshotsoffgoal', 'guestshotsoffgoal', 'homeblockedshots',
       'guestblockedshots', 'homefreekicks', 'guestfreekicks',
       'homecornerkicks', 'guestcornerkicks', 'date', 'bethomewinodds',
       'betdrawodds', 'betguestwinodds', 'homethrowin', 'guestthrowin',
       'GoalDiff', 'winner', 'PredictedHomeOdds', 'PredictedDrawOdds',
       'PredictedGuestOdds', 'PredictedWinner', 'HomeTeamWin', 'Draw',
       'GuestTeamWin', 'season', 'home_overall', 'away_overall',
       'home_AttackingRating', 'away_AttackingRating', 'home_MidfieldRating',
       'away_MidfieldRating', 'home_DefenceRating', 'away_DefenceRating',
       'home_ClubWorth', 'away_ClubWorth', 'home_XIAverageAge',
       'away_XIAverageAge', 'home_DefenceWidth', 'away_DefenceWidth',
       'home_DefenceDepth', 'away_DefenceDepth', 'home_OffenceWidth',
       'away_OffenceWidth', 'home_Likes', 'away_Likes', 'home_Dislikes',
       'away_Dislikes','HomeForm','AwayForm'
       ])

"""df feltöltése csapat df-ekkel"""

for i in namehelp_df.index:
    exec("df = df.append(" + namehelp_df.loc[i, 'dataname'] + "_df,ignore_index=True)")

df.shape

df.sort_values(by=['date', 'hometeamname'], inplace=True, ignore_index=True)
df.head(20)

i = 0
while i < len(df):
  if (df.loc[i,'HomeForm'] == 0):
    awayform = df.loc[i,'AwayForm']
    df.loc[(i+1),'AwayForm'] = awayform
    newdf = newdf.append(df.loc[i+1,:],ignore_index=True)
  elif (df.loc[i,'AwayForm'] == 0):
    homeform = df.loc[i,'HomeForm']
    df.loc[i+1,'HomeForm'] = homeform
    newdf = newdf.append(df.loc[i+1,:],ignore_index=True)
  i += 2

newdf.head(10)

df = newdf
df.shape

df.isnull().sum()

(df == 0).sum()

"""# **Adatvizualizáció**

---



"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
print("Setup Complete")

df.info()

"""Megvizsgáltam a csapatok egyes fifa statisztikái és a gólkülönbség közötti összefüggést, abban az esetben is, amikor a hazai és vendég csapatok értékeit külön 2 dimenziós pontábrán ábrázolom és ahol a 2 különbségét figyelem. Az eredményben kevés különbség van, de mivel ha statisztikák alapján jósolható a gólkülönbség, logikus, hogy a 2 csapat közötti erőkülönbségeket kell figyelnünk, így úgy döntöttem, hogy a továbbiakban azt fogom vizsgálni és azokra fogom a tanítást is végezni."""

plt.figure(figsize=(20,20))
sns.set(font_scale=1)
plt.subplot(4,4,1)
sns.regplot(x=df['GoalDiff'], y=df['home_overall'])

plt.subplot(4,4,2)
sns.regplot(x=df['GoalDiff'], y=df['away_overall'])

plt.subplot(4,4,3)
sns.regplot(x=df['GoalDiff'], y=df['home_AttackingRating'])

plt.subplot(4,4,4)
sns.regplot(x=df['GoalDiff'], y=df['away_AttackingRating'])

plt.subplot(4,4,5)
sns.regplot(x=df['GoalDiff'], y=df['home_MidfieldRating'])

plt.subplot(4,4,6)
sns.regplot(x=df['GoalDiff'], y=df['away_MidfieldRating'])

plt.subplot(4,4,7)
sns.regplot(x=df['GoalDiff'], y=df['home_DefenceRating'])

plt.subplot(4,4,8)
sns.regplot(x=df['GoalDiff'], y=df['away_DefenceRating'])

plt.subplot(4,4,9)
sns.regplot(x=df['GoalDiff'], y=df['home_ClubWorth'])

plt.subplot(4,4,10)
sns.regplot(x=df['GoalDiff'], y=df['away_ClubWorth'])

plt.subplot(4,4,11)
sns.regplot(x=df['GoalDiff'], y=df['home_XIAverageAge'])

plt.subplot(4,4,12)
sns.regplot(x=df['GoalDiff'], y=df['away_XIAverageAge'])

plt.subplot(4,4,13)
sns.regplot(x=df['GoalDiff'], y=df['home_DefenceWidth'])

plt.subplot(4,4,14)
sns.regplot(x=df['GoalDiff'], y=df['away_DefenceWidth'])

plt.subplot(4,4,15)
sns.regplot(x=df['GoalDiff'], y=df['home_Likes'])

plt.subplot(4,4,16)
sns.regplot(x=df['GoalDiff'], y=df['home_Dislikes'])

plt.figure(figsize=(20,20))

plt.subplot(3,3,1)
sns.regplot(x=df['GoalDiff'], y=df['home_overall'] - df['away_overall'])

plt.subplot(3,3,2)
sns.regplot(x=df['GoalDiff'], y=df['home_AttackingRating'] - df['away_AttackingRating'])

plt.subplot(3,3,3)
sns.regplot(x=df['GoalDiff'], y=df['home_MidfieldRating'] - df['away_MidfieldRating'])

plt.subplot(3,3,4)
sns.regplot(x=df['GoalDiff'], y=df['home_DefenceRating'] - df['away_DefenceRating'])

plt.subplot(3,3,5)
sns.regplot(x=df['GoalDiff'], y=df['home_ClubWorth'] - df['away_ClubWorth'])

plt.subplot(3,3,6)
sns.regplot(x=df['GoalDiff'], y=df['home_XIAverageAge'] - df['away_XIAverageAge'])

plt.subplot(3,3,7)
sns.regplot(x=df['GoalDiff'], y=df['home_DefenceWidth'] - df['away_DefenceWidth'])

plt.subplot(3,3,8)
sns.regplot(x=df['GoalDiff'], y=df['home_Likes'] - df['away_Likes'])

plt.subplot(3,3,9)
sns.regplot(x=df['GoalDiff'], y=df['home_AttackingRating'] - df['away_DefenceRating'])

"""# **Df átalakítása traineléshez**

---


"""

df = df.assign(ShotsOnTargetDiff=lambda x: x.homeshotsongoal - x.guestshotsongoal)

df.info()

df.head()

cnames = list(df)
cnames

"""Adatvizualizációból leszűrhető, hogy jobb összefüggést lehet találni akkor, ha kivonjuk a csapat azonos értékeit, így az összes meccs előtt összegyűjtött adatra alkalmazom a módszert. A tanítást 2 bemenő adathalmazra végzem.: az egyik a különbségfigyelés a másik meg a bontott statisztika"""

df = df.assign(OverallRatingDiff=lambda x: x.home_overall - x.away_overall)
df = df.assign(AttackingRatingDiff=lambda x: x.home_AttackingRating - x.away_AttackingRating)
df = df.assign(MidfieldRatingDiff=lambda x: x.home_MidfieldRating - x.away_MidfieldRating)
df = df.assign(DefenceRatingDiff=lambda x: x.home_DefenceRating - x.away_DefenceRating)
df = df.assign(AverageAgeDiff=lambda x: x.home_XIAverageAge - x.away_XIAverageAge)
df = df.assign(DefenceWidthDiff=lambda x: x.home_DefenceWidth - x.away_DefenceWidth)
df = df.assign(DefenceDepthDiff=lambda x: x.home_DefenceDepth - x.away_DefenceDepth)
df = df.assign(OffenceWidthDiff=lambda x: x.home_OffenceWidth - x.away_OffenceWidth)
df = df.assign(LikesDiff=lambda x: x.home_Likes - x.away_Likes)
df = df.assign(DislikesDiff=lambda x: x.home_Dislikes - x.away_Dislikes)
df = df.assign(FormDiff=lambda x: x.HomeForm - x.AwayForm)

df = df.drop([
 'homepossession',
 'guestpossession',
 'homegoals',
 'guestgoals',
 'homegoalattempts',
 'guestgoalattempts',
 'homeshotsongoal',
 'guestshotsongoal',
 'homeshotsoffgoal',
 'guestshotsoffgoal',
 'homeblockedshots',
 'guestblockedshots',
 'homefreekicks',
 'guestfreekicks',
 'homecornerkicks',
 'guestcornerkicks',
 'homethrowin',
 'guestthrowin',
 ],axis='columns')

df.head()

"""# **TRAIN TESZT KÉSZÍTÉS**

---


"""

from sklearn.model_selection import train_test_split

df.info()

cnames = list(df)
cnames

#train test halmaz kiválasztása
X = df.loc[:,[
              'OverallRatingDiff',
              'AttackingRatingDiff',
              'MidfieldRatingDiff',
              'DefenceRatingDiff',
              'AverageAgeDiff',
              'DefenceWidthDiff',
              'DefenceDepthDiff',
              'OffenceWidthDiff',
              'FormDiff',
              'bethomewinodds',
              'betdrawodds',
              'betguestwinodds'
              ]]
y = df.loc[:,['winner']]
print(X)
print(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
print(X_train.size)
print(y_train.size)

X_train.info()

"""# **Feature Selection**

---


"""

from numpy import std
from numpy import mean
from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import Pipeline
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.feature_selection import RFE
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

def run_randomForest(X_train,X_test ,y_train,y_test):
  clf = RandomForestClassifier(n_estimators=100, random_state=0, n_jobs= -1)
  clf.fit(X_train, y_train)
  y_pred = clf.predict(X_test)
  print('Accuracy: ', accuracy_score(y_test, y_pred))

rfe = RFE(estimator=DecisionTreeClassifier(), n_features_to_select=12)
dtcmodel = DecisionTreeClassifier()
pipeline = Pipeline(steps=[('s',rfe),('m',dtcmodel)])
cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)
n_scores = cross_val_score(pipeline, X, y, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')
n_scores

print('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
print(X_train.size)
print(y_train.size)

"""SelectFromModel módszerrel"""

sel = SelectFromModel(RandomForestClassifier(n_estimators=100, random_state=0, n_jobs= -1))
sel.fit(X_train, y_train)
#random forrest után melyikeket találta hasznosnak(true)
sel.get_support()

len(sel.get_support())

#random forrest után melyikeket találta hasznosnak
features = X_train.columns[sel.get_support()]
features

np.mean(sel.estimator_.feature_importances_)

sel.estimator_.feature_importances_

X_train.columns

sel = RFE(RandomForestClassifier(n_estimators=100, random_state=0, n_jobs= -1), n_features_to_select=14)
sel.fit(X_train, y_train)

sel.get_support()

from sklearn.ensemble import GradientBoostingClassifier

#Hosszú fv a RFE tesztelésre, hogy hány attr a legalkalmasabb
for index in range(2,14):
  sel = RFE(GradientBoostingClassifier(n_estimators=100, random_state=0), n_features_to_select=index)
  sel.fit(X_train, y_train)
  X_train_rfe = sel.transform(X_train)
  X_test_rfe = sel.transform(X_test)
  print('Selected features?', index)
  run_randomForest(X_train_rfe,X_test_rfe,y_train,y_test)
  print()

"""# **TRAIN TESZT KÉSZÍTÉS**

---


"""

from sklearn.model_selection import train_test_split

df.info()

cnames = list(df)
cnames

#train test halmaz kiválasztása
X = df.loc[:,[
              'OverallRatingDiff',
              'AttackingRatingDiff',
              'MidfieldRatingDiff',
              'DefenceRatingDiff',
              'AverageAgeDiff',
              'DefenceWidthDiff',
              'DefenceDepthDiff',
              'OffenceWidthDiff',
              'FormDiff',
              'LikesDiff',
              'DislikesDiff',
              'bethomewinodds',
              'betdrawodds',
              'betguestwinodds'
              ]]
y = df.loc[:,['HomeTeamWin','Draw','GuestTeamWin']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

X_train.info()

"""# **TENSORFLOW (Egyetlen réteg, ami 3 kimenetből áll(gyakorlatilag lineáris súlyok képzése az egyes attribútumokhoz))**

---

https://www.youtube.com/watch?v=6_2hzRopPbQ&ab_channel=NicholasRenotte
https://www.youtube.com/watch?v=bqBRET7tbiQ&ab_channel=DigitalSreeni
"""

from tensorflow import keras
from tensorflow import lite

from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score

from sklearn.preprocessing import MinMaxScaler

scaler_mm = MinMaxScaler()
#scaler_mm.fit(X)
X = scaler_mm.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 42, stratify = y)

"""https://www.youtube.com/watch?v=Edhv7-4t0lc&ab_channel=PythonEngineer"""

neuralmodelraw = Sequential()
neuralmodelraw.add(Dense(3, input_dim=X_train.shape[1]))
loss = keras.losses.CategoricalCrossentropy(from_logits=True)
optim = keras.optimizers.Adam(lr=0.001)
metrics = ["accuracy"]

neuralmodelraw.compile(loss=loss, optimizer=optim, metrics=metrics)
print(neuralmodelraw.summary)

neuralmodelraw.fit(X_train, y_train, verbose = 1, epochs=300, validation_data=(X_test, y_test))

probability_model = keras.models.Sequential([
                                             neuralmodelraw,
                                             keras.layers.Softmax()
])

y_hat = probability_model.predict(X_test)
y_hat

y_hat = pd.DataFrame(y_hat, columns = ['hometeam','draw','guest'])
y_hat.head()

for idx in y_hat.index: 
  if y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'draw'] and y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 1
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 1
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'draw']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 1

accuracy_score(y_test, y_hat)

"""

---

"""

dfhelp = probability_model.predict(X)
dfhelp = pd.DataFrame(dfhelp, columns = ['Homepredodds','Drawpredodds','Guestpredodds'])
home = dfhelp['Homepredodds']

print(dfhelp['Homepredodds'].max())
print(dfhelp['Homepredodds'].min())
print(dfhelp['Drawpredodds'].max())
print(dfhelp['Drawpredodds'].min())
print(dfhelp['Guestpredodds'].max())
print(dfhelp['Guestpredodds'].min())

df['PredictedHomeOdds'] = dfhelp['Homepredodds'].map(lambda x: 1/x).astype(float)
df['PredictedDrawOdds'] = dfhelp['Drawpredodds'].map(lambda x: 1/x).astype(float)
df['PredictedGuestOdds'] = dfhelp['Guestpredodds'].map(lambda x: 1/x).astype(float)
#helyes oddsok kiszámolása
def correctodds(a, b, c, d):
    teljesesemenyter = 1/a + 1/b +1/c
    corrodds =1/((1/d) / teljesesemenyter)
    return corrodds

df = df.assign(CurrectHomeOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedHomeOdds))
df = df.assign(CurrectDrawOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedDrawOdds))
df = df.assign(CurrectGuestOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedGuestOdds))
df.head()

money = 10000
money_history = []
for idx in range(0,50): 
  if df.loc[idx, 'bethomewinodds'] > df.loc[idx, 'CurrectHomeOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 1:
      betwin = 0.25 * money * df.loc[idx, 'bethomewinodds']
    elif df.loc[idx, 'winner'] != 1:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betdrawodds'] > df.loc[idx, 'CurrectDrawOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 0:
      betwin = 0.25 * money * df.loc[idx, 'betdrawodds']
    elif df.loc[idx, 'winner'] != 0:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betguestwinodds'] > df.loc[idx, 'CurrectGuestOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == -1:
      betwin = 0.25 * money * df.loc[idx, 'betguestwinodds']
    elif df.loc[idx, 'winner'] != -1:
      betwin = 0
    money = money + betwin
    money_history.append(money)

plt.figure(figsize=(14,6))
sns.set(font_scale=2)
sns.lineplot(data =money_history)

money_history

from sklearn.metrics import plot_confusion_matrix
import itertools

conf_pred = []
for idx in y_hat.index:
  if(y_hat.loc[idx, 'hometeam'] == 1):
    conf_pred.append(1)
  if(y_hat.loc[idx, 'draw'] == 1):
    conf_pred.append(0)
  if(y_hat.loc[idx, 'guest'] == 1):
    conf_pred.append(-1)

conf_test = []
for ys in y_test.index:
  if(y_test.loc[ys, 'HomeTeamWin'] ==1):
    conf_test.append(1)
  if(y_test.loc[ys, 'Draw'] ==1):
    conf_test.append(0)
  if(y_test.loc[ys, 'GuestTeamWin'] ==1):
    conf_test.append(-1)

conf_pred

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(conf_test, conf_pred)
sns.set(font_scale=2)
plt.figure(figsize=(15,10))
f = sns.heatmap(cm, annot=True,xticklabels=False,yticklabels=False)
f.set_xlabel("modell jóslat",fontsize=30)
f.set_ylabel("Valós eredmény",fontsize=30)

"""

---

"""

#model = keras.Sequential([keras.layers.Dense(units=1,input_shape=[1]), keras.layers.Dense(units=1,input_shape=[1])])

#model.compile(optimizer='sgd', loss='mean_squared_error')

#model.fit(X, y, epochs=100)

#print(model.predict([0]))

kearas_file = "oddstest.h5"

tf_lite_filename = "dfwinnerpredictone.tflite"

converter = lite.TFLiteConverter.from_keras_model(probability_model)

tfmodel = converter.convert()

tfmodel_name = tf_lite_filename
open(tfmodel_name,"wb").write(tfmodel)

tf.keras.models.save_model(tfmodel, kearas_file)

"""# **TENSORFLOW (Egy köztes réteg)**

---

https://www.youtube.com/watch?v=6_2hzRopPbQ&ab_channel=NicholasRenotte
https://www.youtube.com/watch?v=bqBRET7tbiQ&ab_channel=DigitalSreeni
"""

from sklearn.preprocessing import MinMaxScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 42, stratify = y)

neuralmodelraw_2 = Sequential()
neuralmodelraw_2.add(Dense(units = 32, activation='relu', input_dim=X_train.shape[1]))
neuralmodelraw_2.add(Dense(3))
loss = keras.losses.CategoricalCrossentropy(from_logits=True)
optim = keras.optimizers.Adam(lr=0.001)
metrics = ["accuracy"]

neuralmodelraw_2.compile(loss=loss, optimizer=optim, metrics=metrics)
print(neuralmodelraw_2.summary)

neuralmodelraw_2.fit(X_train, y_train, verbose = 1, epochs=300, validation_data=(X_test, y_test))

neuralmodel_2 = keras.models.Sequential([
                                             neuralmodelraw_2,
                                             keras.layers.Softmax()
])

y_hat = neuralmodel_2.predict(X_test)
y_hat

y_hat = pd.DataFrame(y_hat, columns = ['hometeam','draw','guest'])
y_hat.head()

for idx in y_hat.index: 
  if y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'draw'] and y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 1
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 1
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'draw']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 1

y_hat.head()

accuracy_score(y_test, y_hat)

"""

---

"""

dfhelp = neuralmodel_2.predict(X)
dfhelp = pd.DataFrame(dfhelp, columns = ['Homepredodds','Drawpredodds','Guestpredodds'])
home = dfhelp['Homepredodds']

print(dfhelp['Homepredodds'].max())
print(dfhelp['Homepredodds'].min())
print(dfhelp['Drawpredodds'].max())
print(dfhelp['Drawpredodds'].min())
print(dfhelp['Guestpredodds'].max())
print(dfhelp['Guestpredodds'].min())

df['PredictedHomeOdds'] = dfhelp['Homepredodds'].map(lambda x: 1/x).astype(float)
df['PredictedDrawOdds'] = dfhelp['Drawpredodds'].map(lambda x: 1/x).astype(float)
df['PredictedGuestOdds'] = dfhelp['Guestpredodds'].map(lambda x: 1/x).astype(float)

df.head(10)

#helyes oddsok kiszámolása
def correctodds(a, b, c, d):
    teljesesemenyter = 1/a + 1/b +1/c
    corrodds =1/((1/d) / teljesesemenyter)
    return corrodds

df = df.assign(CurrectHomeOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedHomeOdds))
df = df.assign(CurrectDrawOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedDrawOdds))
df = df.assign(CurrectGuestOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedGuestOdds))
df.head()

money = 10000
money_history = []
for idx in range(50): 
  if df.loc[idx, 'bethomewinodds'] > df.loc[idx, 'CurrectHomeOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 1:
      betwin = 0.25 * money * df.loc[idx, 'bethomewinodds']
    elif df.loc[idx, 'winner'] != 1:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betdrawodds'] > df.loc[idx, 'CurrectDrawOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 0:
      betwin = 0.25 * money * df.loc[idx, 'betdrawodds']
    elif df.loc[idx, 'winner'] != 0:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betguestwinodds'] > df.loc[idx, 'CurrectGuestOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == -1:
      betwin = 0.25 * money * df.loc[idx, 'betguestwinodds']
    elif df.loc[idx, 'winner'] != -1:
      betwin = 0
    money = money + betwin
    money_history.append(money)

plt.figure(figsize=(14,6))
sns.lineplot(data =money_history)

money_history

plot_confusion_matrix(neuralmodel_2, X_test, y_test, display_labels=["1", "2", "3"])

"""

---

"""

#model = keras.Sequential([keras.layers.Dense(units=1,input_shape=[1]), keras.layers.Dense(units=1,input_shape=[1])])

#model.compile(optimizer='sgd', loss='mean_squared_error')

#model.fit(X, y, epochs=100)

#print(model.predict([0]))

kearas_file = "oddstest.h5"

tf_lite_filename = "dfwinnerpredicttwo.tflite"

converter = lite.TFLiteConverter.from_keras_model(neuralmodel_2)

tfmodel = converter.convert()

tfmodel_name = tf_lite_filename
open(tfmodel_name,"wb").write(tfmodel)

tf.keras.models.save_model(neuralmodel, kearas_file)

"""# **TENSORFLOW (Két köztes réteg)**

---

https://www.youtube.com/watch?v=6_2hzRopPbQ&ab_channel=NicholasRenotte
https://www.youtube.com/watch?v=bqBRET7tbiQ&ab_channel=DigitalSreeni
"""

from sklearn.preprocessing import MinMaxScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 42, stratify = y)

neuralmodelraw_3 = Sequential()
neuralmodelraw_3.add(Dense(units = 32, activation='relu', input_dim=X_train.shape[1]))
neuralmodelraw_3.add(Dense(units = 64, activation='relu'))
neuralmodelraw_3.add(Dense(3))
loss = keras.losses.CategoricalCrossentropy(from_logits=True)
optim = keras.optimizers.Adam(lr=0.001)
metrics = ["accuracy"]

neuralmodelraw_3.compile(loss=loss, optimizer=optim, metrics=metrics)
print(neuralmodelraw_3.summary)

neuralmodelraw_3.fit(X_train, y_train, verbose = 1, epochs=300, validation_data=(X_test, y_test))

neuralmodel_3 = keras.models.Sequential([
                                             neuralmodelraw_3,
                                             keras.layers.Softmax()
])

y_hat = neuralmodel_3.predict(X_test)
y_hat = pd.DataFrame(y_hat, columns = ['hometeam','draw','guest'])
for idx in y_hat.index: 
  if y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'draw'] and y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 1
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 1
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'draw']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 1

accuracy_score(y_test, y_hat)

"""

---

"""

dfhelp = neuralmodel_3.predict(X)
dfhelp = pd.DataFrame(dfhelp, columns = ['Homepredodds','Drawpredodds','Guestpredodds'])
home = dfhelp['Homepredodds']

print(dfhelp['Homepredodds'].max())
print(dfhelp['Homepredodds'].min())
print(dfhelp['Drawpredodds'].max())
print(dfhelp['Drawpredodds'].min())
print(dfhelp['Guestpredodds'].max())
print(dfhelp['Guestpredodds'].min())

df['PredictedHomeOdds'] = dfhelp['Homepredodds'].map(lambda x: 1/x).astype(float)
df['PredictedDrawOdds'] = dfhelp['Drawpredodds'].map(lambda x: 1/x).astype(float)
df['PredictedGuestOdds'] = dfhelp['Guestpredodds'].map(lambda x: 1/x).astype(float)

df.head(10)

#helyes oddsok kiszámolása
def correctodds(a, b, c, d):
    teljesesemenyter = 1/a + 1/b +1/c
    corrodds =1/((1/d) / teljesesemenyter)
    return corrodds

df = df.assign(CurrectHomeOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedHomeOdds))
df = df.assign(CurrectDrawOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedDrawOdds))
df = df.assign(CurrectGuestOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedGuestOdds))
df.head()

money = 10000
money_history = []
for idx in range(50): 
  if df.loc[idx, 'bethomewinodds'] > df.loc[idx, 'CurrectHomeOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 1:
      betwin = 0.25 * money * df.loc[idx, 'bethomewinodds']
    elif df.loc[idx, 'winner'] != 1:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betdrawodds'] > df.loc[idx, 'CurrectDrawOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 0:
      betwin = 0.25 * money * df.loc[idx, 'betdrawodds']
    elif df.loc[idx, 'winner'] != 0:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betguestwinodds'] > df.loc[idx, 'CurrectGuestOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == -1:
      betwin = 0.25 * money * df.loc[idx, 'betguestwinodds']
    elif df.loc[idx, 'winner'] != -1:
      betwin = 0
    money = money + betwin
    money_history.append(money)

plt.figure(figsize=(14,6))
sns.lineplot(data =money_history)

money_history

"""

---

"""

#model = keras.Sequential([keras.layers.Dense(units=1,input_shape=[1]), keras.layers.Dense(units=1,input_shape=[1])])

#model.compile(optimizer='sgd', loss='mean_squared_error')

#model.fit(X, y, epochs=100)

#print(model.predict([0]))

kearas_file = "oddstest.h5"

tf_lite_filename = "dfwinnerpredictthree.tflite"

converter = lite.TFLiteConverter.from_keras_model(neuralmodel)

tfmodel = converter.convert()

tfmodel_name = tf_lite_filename
open(tfmodel_name,"wb").write(tfmodel)

tf.keras.models.save_model(neuralmodel, kearas_file)

"""# **TENSORFLOW (Egy köztes réteg,célréteg nem sigmoid hanem softmax)**

---

https://www.youtube.com/watch?v=6_2hzRopPbQ&ab_channel=NicholasRenotte
https://www.youtube.com/watch?v=bqBRET7tbiQ&ab_channel=DigitalSreeni

//TODO https://github.com/tensorflow/tensorflow/issues/31688
    //elméletileg a tensorflow lite nem támogatja a sigmoid eljárást csak a relut
    //https://www.tensorflow.org/lite/guide/ops_compatibility

Modellfajták: https://www.tensorflow.org/api_docs/python/tf/keras/activations
"""

from sklearn.preprocessing import MinMaxScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 42, stratify = y)

neuralmodel_soft = Sequential()
neuralmodel_soft.add(Dense(units = 32, activation='relu', input_dim=X_train.shape[1]))
neuralmodel_soft.add(Dense(units = 3, activation='softmax'))

neuralmodel_soft.compile(loss='mean_squared_error', optimizer='sgd',metrics='accuracy')
print(neuralmodel_soft.summary)

neuralmodel_soft.fit(X_train, y_train, verbose = 1, epochs=400, validation_data=(X_test, y_test))

y_hat = neuralmodel_soft.predict(X_test)
y_hat

y_hat = pd.DataFrame(y_hat, columns = ['hometeam','draw','guest'])
y_hat.head()

for idx in y_hat.index: 
  if y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'draw'] and y_hat.loc[idx, 'hometeam'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 1
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'draw'] > y_hat.loc[idx, 'guest']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 1
    y_hat.loc[idx, 'guest'] = 0
  elif y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'hometeam'] and y_hat.loc[idx, 'guest'] > y_hat.loc[idx, 'draw']:
    y_hat.loc[idx, 'hometeam'] = 0
    y_hat.loc[idx, 'draw'] = 0
    y_hat.loc[idx, 'guest'] = 1

y_hat.head()

accuracy_score(y_test, y_hat)

"""

---

"""

dfhelp = neuralmodel_2.predict(X)
dfhelp = pd.DataFrame(dfhelp, columns = ['Homepredodds','Drawpredodds','Guestpredodds'])
home = dfhelp['Homepredodds']

print(dfhelp['Homepredodds'].max())
print(dfhelp['Homepredodds'].min())
print(dfhelp['Drawpredodds'].max())
print(dfhelp['Drawpredodds'].min())
print(dfhelp['Guestpredodds'].max())
print(dfhelp['Guestpredodds'].min())

df['PredictedHomeOdds'] = dfhelp['Homepredodds'].map(lambda x: 1/x).astype(float)
df['PredictedDrawOdds'] = dfhelp['Drawpredodds'].map(lambda x: 1/x).astype(float)
df['PredictedGuestOdds'] = dfhelp['Guestpredodds'].map(lambda x: 1/x).astype(float)

df.head(10)

#helyes oddsok kiszámolása
def correctodds(a, b, c, d):
    teljesesemenyter = 1/a + 1/b +1/c
    corrodds =1/((1/d) / teljesesemenyter)
    return corrodds

df = df.assign(CurrectHomeOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedHomeOdds))
df = df.assign(CurrectDrawOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedDrawOdds))
df = df.assign(CurrectGuestOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedGuestOdds))
df.head()

money = 10000
money_history = []
for idx in df.index: 
  if df.loc[idx, 'bethomewinodds'] > df.loc[idx, 'CurrectHomeOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 1:
      betwin = 0.25 * money * df.loc[idx, 'bethomewinodds']
    elif df.loc[idx, 'winner'] != 1:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betdrawodds'] > df.loc[idx, 'CurrectDrawOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 0:
      betwin = 0.25 * money * df.loc[idx, 'betdrawodds']
    elif df.loc[idx, 'winner'] != 0:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betguestwinodds'] > df.loc[idx, 'CurrectGuestOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == -1:
      betwin = 0.25 * money * df.loc[idx, 'betguestwinodds']
    elif df.loc[idx, 'winner'] != -1:
      betwin = 0
    money = money + betwin
    money_history.append(money)

plt.figure(figsize=(14,6))
sns.lineplot(data =money_history)

money_history

"""

---

"""

#model = keras.Sequential([keras.layers.Dense(units=1,input_shape=[1]), keras.layers.Dense(units=1,input_shape=[1])])

#model.compile(optimizer='sgd', loss='mean_squared_error')

#model.fit(X, y, epochs=100)

#print(model.predict([0]))

kearas_file = "oddstest.h5"

tf_lite_filename = "dfwinnerpredict.tflite"

converter = lite.TFLiteConverter.from_keras_model(neuralmodel)

tfmodel = converter.convert()

tfmodel_name = tf_lite_filename
open(tfmodel_name,"wb").write(tfmodel)

tf.keras.models.save_model(neuralmodel, kearas_file)

traindf, valdf = train_test_split(df, test_size=0.1)

"""# **TRAIN TESZT KÉSZÍTÉS(GoalDiff)**

---


"""

from sklearn.model_selection import train_test_split

df.info()

cnames = list(df)
cnames

#train test halmaz kiválasztása
X = df.loc[:,[
              'OverallRatingDiff',
              'AttackingRatingDiff',
              'MidfieldRatingDiff',
              'DefenceRatingDiff',
              'AverageAgeDiff',
              'DefenceWidthDiff',
              'DefenceDepthDiff',
              'OffenceWidthDiff',
              'bethomewinodds',
              'betdrawodds',
              'betguestwinodds'
              ]]
y = df.loc[:,['GoalDiff']]
print(X)
print(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
print(X_train.size)
print(y_train.size)

X_train.info()

"""# **TENSORFLOW (GoalDiff)**

---

https://www.youtube.com/watch?v=6_2hzRopPbQ&ab_channel=NicholasRenotte
https://www.youtube.com/watch?v=bqBRET7tbiQ&ab_channel=DigitalSreeni
"""

from sklearn.preprocessing import MinMaxScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 42, stratify = y)

scaler_mm = MinMaxScaler()
#scaler_mm.fit(X)
X = scaler_mm.fit_transform(X)
X

goaldiffmodel = Sequential()
goaldiffmodel.add(Dense(units = 32, activation='relu', input_dim=X_train.shape[1]))
goaldiffmodel.add(Dense(units = 64, activation='relu'))
goaldiffmodel.add(Dense(units = 1, activation='relu'))

goaldiffmodel.compile(loss='mean_squared_error', optimizer='sgd',metrics='accuracy')
print(goaldiffmodel.summary)

goaldiffmodel.fit(X_train, y_train, verbose = 1, epochs=400, validation_data=(X_test, y_test))

"""

---

"""

df['PredictedHomeOdds'] = dfhelp['Homepredodds'].map(lambda x: 1/x).astype(float)
df['PredictedDrawOdds'] = dfhelp['Drawpredodds'].map(lambda x: 1/x).astype(float)
df['PredictedGuestOdds'] = dfhelp['Guestpredodds'].map(lambda x: 1/x).astype(float)

df.head(10)

#helyes oddsok kiszámolása
def correctodds(a, b, c, d):
    teljesesemenyter = 1/a + 1/b +1/c
    corrodds =1/((1/d) / teljesesemenyter)
    return corrodds

df = df.assign(CurrectHomeOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedHomeOdds))
df = df.assign(CurrectDrawOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedDrawOdds))
df = df.assign(CurrectGuestOdds=lambda x: correctodds(x.PredictedHomeOdds,x.PredictedDrawOdds, x.PredictedGuestOdds,x.PredictedGuestOdds))
df.head()

money = 10000
money_history = []
for idx in df.index: 
  if df.loc[idx, 'bethomewinodds'] > df.loc[idx, 'CurrectHomeOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 1:
      betwin = 0.25 * money * df.loc[idx, 'bethomewinodds']
    elif df.loc[idx, 'winner'] != 1:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betdrawodds'] > df.loc[idx, 'CurrectDrawOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == 0:
      betwin = 0.25 * money * df.loc[idx, 'betdrawodds']
    elif df.loc[idx, 'winner'] != 0:
      betwin = 0
    money = money + betwin
    money_history.append(money)
  if df.loc[idx, 'betguestwinodds'] > df.loc[idx, 'CurrectGuestOdds'] :
    money = money * 0.8
    if df.loc[idx, 'winner'] == -1:
      betwin = 0.25 * money * df.loc[idx, 'betguestwinodds']
    elif df.loc[idx, 'winner'] != -1:
      betwin = 0
    money = money + betwin
    money_history.append(money)

plt.figure(figsize=(14,6))
sns.lineplot(data =money_history)

money_history

"""

---

"""

#model = keras.Sequential([keras.layers.Dense(units=1,input_shape=[1]), keras.layers.Dense(units=1,input_shape=[1])])

#model.compile(optimizer='sgd', loss='mean_squared_error')

#model.fit(X, y, epochs=100)

#print(model.predict([0]))

kearas_file = "oddstest.h5"

tf_lite_filename = "dfwinnerpredict.tflite"

converter = lite.TFLiteConverter.from_keras_model(neuralmodel)

tfmodel = converter.convert()

tfmodel_name = tf_lite_filename
open(tfmodel_name,"wb").write(tfmodel)

convert_bytes(get_file_size(tf_lite_filename), "Kb")

tf.keras.models.save_model(neuralmodel, kearas_file)

team.teamname = teamname
team.matches_played = matches_played
team.overall = overall
team.attackingRating = attackingRating
team.midfieldRating = midfieldRating
team.defenceRating = defenceRating
team.clubWorth = clubWorth
team.xIAverageAge = xIAverageAge
team.defenceWidth = defenceWidth
team.offenceWidth = offenceWidth
team.likes = likes
team.dislikes = dislikes
team.avgoals = avgoals
team.avconceded = avconceded
team.avgoalattempts = avgoalattempts
team.avshotsongoal = avshotsongoal
team.avshotsoffgoal = avshotsoffgoal
team.avblockedshots = avblockedshots
team.avpossession = avpossession
team.avfreekicks = avfreekicks
team.avGoalDiff = avGoalDiff
team.avwins = avwins
team.avdraws = avdraws
team.avlose = avlose

append/3
append/2
member/2
memberchk/2
select/3
reverse/2
nth0/3
nth1/3
sumlist/2
last/2,
sort/2
between/3
findall/3
bagof/3
setof/3

models_x = ['T1-100','T1-200','T1-300','T1-400','T1-500','T2-200','T2-300','T2-400','T3-200','T2-300','T2-400']
value_y = [
0.536,
0.546,
0.55,
0.56,
0.55,

0.5477,
0.552,
0.554,

0.513,
0.524,
0.508
]
plt.figure(figsize=(15,10))
sns.set(font_scale=1.4)
ax = sns.barplot(x=models_x, y = value_y,ci=None)
ax.set_xlabel("Modell",fontsize=20)
ax.set_ylabel("Pontosság",fontsize=20)